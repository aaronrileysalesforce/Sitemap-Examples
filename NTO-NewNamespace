SalesforceInteractions.init({
    cookieDomain: "northerntrailoutfitters.com",
    consents: [{
        purpose: SalesforceInteractions.mcis.ConsentPurpose.Personalization,
        provider: "NTO Consent Manager",
        status: SalesforceInteractions.ConsentStatus.OptIn
    }]
}).then( ()=> {
    const config = {
        global: {
            contentZones: [
                {name: "Infobar - Top of Page", selector: "header.site-header"},
                {name: "Infobar - Bottom of Page", selector: "footer.site-footer"},
                {name: "Footer - Marketing Signup", selector: "div.site-footer__header.mb-1"}
            ],
            onActionEvent: (event) => {
                //HoloApp integration
                if (window.evgIsHoloapp === true) {
                	var holoappAction = event.action || event.source && event.source.pageType || "Other Screen";
                	if(!holoappAction.startsWith("iosApp")){
                		event.action = 'iosApp: ' + holoappAction;
                		event.source = {channel: 'iosApp'};
                		if(window.evgHoloappUserId){
                			event.user = event.user || {};
                			event.user.id = window.evgHoloappUserId;
                			// Do we want to map to salesforceContactId and/or emailAddress
                		}
                	}
                	else return null;
                }

                if (event.user) {
                    //Get Email Address from querystring
                    var myEmail = SalesforceInteractions.mcis.getParameterByName("subscriberKey");
                    if (myEmail) {
                        event.user.id = myEmail;
                        event.user.attributes = {emailAddress: myEmail};
                        console.log ("Setting user.id to: " + myEmail);
                    } else {
                        myEmail = SalesforceInteractions.mcis.getValueFromNestedObject("window._etmc.user_info.email");
                        if (myEmail) {
                            event.user.identities = actionEvent.user.identities || {};
                            event.user.identities.emailAddress = myEmail;
                            console.log ("Setting user.id to: " + myEmail);
                        }
                    }
                }
                return event;
            },
            listeners: [
                SalesforceInteractions.listener("submit", ".email-signup", () => {
                    var nlEmail = SalesforceInteractions.cashDom("#dwfrm_mcsubscribe_email").val();
                    if (nlEmail) {
                        SalesforceInteractions.sendEvent({ interaction: { name: "Email Sign Up - Footer" }, user: { identities: { emailAddress: nlEmail } } });
                    }
                }),
            ],
        },
        pageTypes: [
            {
                name: "Product Page",
                /*
                The best practice for isMatch is to match as quickly as possible. If matching immediately is not an option, you can use a Promise.
                The Promise should resolve true or false and not pend indefinitely. This Promise example uses a setTimeout to prevent the isMatch from pending indefinitely if the match condition is not met fast enough. In this scenario, we know that the match condition will be met within 50 milliseconds or not at all. Note that using a timeout like this might not be sufficient in all cases and if you are using a Promise it should be tailored to your specific use-case. 
                */
                isMatch: () => new Promise((resolve, reject) => {
                    let isMatchPDP = setTimeout(() => {
                        resolve(false);
                    }, 50);
                    return SalesforceInteractions.DisplayUtils.pageElementLoaded("div.page[data-action='Product-Show']", "html").then(() => {
                        clearTimeout(isMatchPDP);
                        resolve(true);
                    })
                }),
                interaction: {
                    name: SalesforceInteractions.CatalogObjectInteractionName.ViewCatalogObject,
                    catalogObject: {
                        type: "Product",
                        id: () => {
                            return SalesforceInteractions.util.resolveWhenTrue.bind(() => {
                                const productId = SalesforceInteractions.cashDom(".product-id").first().text();
                                const products = getProductsFromDataLayer();
                                if (products && products.length > 0) {
                                    return products[0].id;
                                } else if (productId) {
                                    return productId;
                                } else {
                                    return false;
                                }
                            })
                        },
                        attributes: {
                            sku: { id: SalesforceInteractions.cashDom(".product-detail[data-pid]").attr("data-pid") },
                            name: SalesforceInteractions.resolvers.fromJsonLd("name"),
                            description: SalesforceInteractions.resolvers.fromSelector(".short-description", (desc) => desc.trim()),
                            url: SalesforceInteractions.resolvers.fromHref(),
                            imageUrl: SalesforceInteractions.resolvers.fromSelectorAttribute(".product-carousel .carousel-item[data-slick-index='0'] img", "src",
                            (url) =>  window.location.origin + url),
                            inventoryCount: 1,
                            price: SalesforceInteractions.resolvers.fromSelector(".prices .price .value", (price) => parseFloat(price.replace(/[^0-9\.]+/g,""))),
                            rating: () => {
                                return SalesforceInteractions.mcis.extractFirstGroup(/([.\w]+) out of/, SalesforceInteractions.cashDom(".ratings .sr-only").text());
                            },
                        },
                        relatedCatalogObjects: {
                            Category: SalesforceInteractions.DisplayUtils.pageElementLoaded(".container .product-breadcrumb .breadcrumb a", "html").then((ele) => {
                                return SalesforceInteractions.resolvers.buildCategoryId(".container .product-breadcrumb .breadcrumb a", null, null, (categoryId) => [categoryId.toUpperCase()]);
                            }),
                            Gender: SalesforceInteractions.DisplayUtils.pageElementLoaded(".product-breadcrumb .breadcrumb a, h1.product-name", "html").then((ele) => {
                                if (SalesforceInteractions.cashDom(".product-breadcrumb .breadcrumb a").first().text().toLowerCase() === "women" || 
                                SalesforceInteractions.cashDom("h1.product-name").text().indexOf("Women") >= 0) {
                                    return ["WOMEN"];
                                } else if (SalesforceInteractions.cashDom(".product-breadcrumb .breadcrumb a").first().text().toLowerCase() === "men" || 
                                SalesforceInteractions.cashDom("h1.product-name").text().indexOf("Men") >= 0) {
                                    return ["MEN"];
                                } else {
                                    return;
                                }
                            }),
                            Style: SalesforceInteractions.DisplayUtils.pageElementLoaded(".attributes", "html").then((ele) => {
                                return SalesforceInteractions.resolvers.fromSelectorAttributeMultiple(".color-value", "data-attr-value");
                            }),
                            ItemClass: SalesforceInteractions.DisplayUtils.pageElementLoaded(".features", "html").then((ele) => {
                                return SalesforceInteractions.resolvers.fromSelectorMultiple(".features .feature", (features) => {
                                    return features.map((feature) => {
                                        return feature.trim().toUpperCase();
                                    })
                                })
                            }),
                            Brand: () => {
                                return [JSON.parse(SalesforceInteractions.cashDom("script[type='application/ld+json']").text())?.brand?.name];
                            }
                        },
                    },
                },
                contentZones: [
                    { name: "PDP Recs Container", selector: "div.row.recommendations > div"},
                    { name: "PDP Social", selector: ".product-availability"}
                ],
                listeners: [
                    SalesforceInteractions.listener("click", ".add-to-cart", () => {
                        const lineItem = SalesforceInteractions.mcis.buildLineItemFromPageState("select.quantity-select option:checked");
                        SalesforceInteractions.sendEvent({
                            interaction: {
                                name: SalesforceInteractions.CartInteractionName.AddToCart,
                                lineItem: lineItem
                            }
                        })
                    }),
                    SalesforceInteractions.listener("click", ".attribute", (event) => {
                        let classList = event.target.classList.value.split(" ");
                        if (classList.includes("color-value") || classList.includes("size-value")) {
                            SalesforceInteractions.sendEvent({
                                interaction: {
                                    name: SalesforceInteractions.CatalogObjectInteractionName.ViewCatalogObjectDetail,
                                    catalogObject: {
                                        type: "Product",
                                        id: SalesforceInteractions.getSitemapResult().currentPage.interaction.catalogObject.id,
                                        attributes: {
                                            sku: { id: SalesforceInteractions.cashDom(".product-detail[data-pid]").attr("data-pid") }
                                        },
                                        relatedCatalogObjects: {
                                            Color: [SalesforceInteractions.cashDom(".color-value.selected").attr("data-attr-value")]
                                        }
                                    }
                                }
                            });
                        }   
                    })
                ]
            },
            {
                name: "Category",
                isMatch: () => new Promise((resolve, reject) => {
                    let isMatchCat = setTimeout(() => {
                        resolve(false);
                    }, 50);
                    return SalesforceInteractions.DisplayUtils.pageElementLoaded("#product-search-results", "html").then(() => {
                        clearTimeout(isMatchCat);
                        resolve(SalesforceInteractions.cashDom(".breadcrumb").length > 0);
                    });
                }),
                interaction: {
                    name: SalesforceInteractions.CatalogObjectInteractionName.ViewCatalogObject,
                    catalogObject: {
                        type: "Category",
                        id: SalesforceInteractions.DisplayUtils.pageElementLoaded(".breadcrumb .breadcrumb-item a", "html").then((ele) => {
                            return SalesforceInteractions.resolvers.buildCategoryId(".breadcrumb .breadcrumb-item a", 1, null, (categoryId) => categoryId.toUpperCase());
                        })
                    }
                },
                listeners: [
                    SalesforceInteractions.listener("click", ".quickview", (e) => {
                        const pid = SalesforceInteractions.cashDom(e.target).attr("href").split("pid=")[1];
                        if (!pid) {
                            return;
                        }
                        SalesforceInteractions.sendEvent({
                            interaction: {
                                name: SalesforceInteractions.CatalogObjectInteractionName.QuickViewCatalogObject,
                                catalogObject: {
                                    type: "Product",
                                    id: pid
                                }
                            }
                        });
                    }),
                    SalesforceInteractions.listener("click", "body", (e) => {
                        if (SalesforceInteractions.cashDom(e.target).closest("button[data-dismiss='modal']").length > 0) {
                            SalesforceInteractions.sendEvent({
                                interaction: {
                                    name: SalesforceInteractions.mcis.CatalogObjectInteractionName.StopQuickViewCatalogObject,
                                }
                            });
                        } else if (SalesforceInteractions.cashDom(e.target).closest("#quickViewModal").length > 0 
                        && SalesforceInteractions.cashDom(e.target).find("#quickViewModal .modal-dialog").length > 0) {
                            SalesforceInteractions.sendEvent({
                                interaction: {
                                    name: SalesforceInteractions.mcis.CatalogObjectInteractionName.StopQuickViewCatalogObject,
                                }
                            });
                        }
                    })
                ]
            },
            {
                name: "department",
                isMatch: () => new Promise((resolve, reject) => {
                    let isMatchDept = setTimeout(() => {
                        resolve(false);
                    }, 50);
                    return SalesforceInteractions.DisplayUtils.pageElementLoaded("div.category-tile", "html").then(() => {
                        clearTimeout(isMatchDept);
                        resolve(!/\/homepage/.test(window.location.href));
                    });
                }),
                interaction: {
                    name: "View Department"
                }
            },
            {
                name: "search_results",
                isMatch: () => /\/default\/search$/.test(window.location.pathname),
                interaction: {
                    name: "View Search Results"
                }
            },
            {
                name: "Cart",
                isMatch: () => /\/cart/.test(window.location.href),
                interaction: {
                    name: SalesforceInteractions.CartInteractionName.ReplaceCart,
                    lineItems: SalesforceInteractions.DisplayUtils.pageElementLoaded(".cart-empty, .checkout-btn", "html").then(() => {   
                        let cartLineItems = [];
                        SalesforceInteractions.cashDom(".product-info .product-details").each((index, ele) => {
                            let itemQuantity = parseInt(SalesforceInteractions.cashDom(ele).find(".qty-card-quantity-count").text().trim());
                            if (itemQuantity && itemQuantity > 0) {
                                let lineItem = {
                                    catalogObjectType: "Product",
                                    catalogObjectId: SalesforceInteractions.cashDom(ele).find(".line-item-quantity-info").attr("data-pid").trim(),
                                    price: SalesforceInteractions.cashDom(ele).find(".pricing").text().trim().replace(/[^0-9\.]+/g,"")/itemQuantity,
                                    quantity: itemQuantity
                                };
                                cartLineItems.push(lineItem);
                            }
                        })
                        return cartLineItems;
                    })
                }
            },
            {
                name: "Checkout Process",
                action: "Checkout Process",
                isMatch: () => /\/checkout/.test(window.location.href) && !/\/checkout-login/.test(window.location.href),
                interaction: {
                    name: SalesforceInteractions.CartInteractionName.ReplaceCart,
                    lineItems: SalesforceInteractions.DisplayUtils.pageElementLoaded(".cart-empty, .submit-shipping", "html").then(() => {   
                        let cartLineItems = [];
                        SalesforceInteractions.cashDom(".product-info .product-details").each((index, ele) => {
                            let itemQuantity = parseInt(SalesforceInteractions.cashDom(ele).find(".qty-card-quantity-count").text().trim());
                            if (itemQuantity && itemQuantity > 0) {
                                let lineItem = {
                                    catalogObjectType: "Product",
                                    catalogObjectId: SalesforceInteractions.cashDom(ele).find(".line-item-quantity-info").attr("data-pid").trim(),
                                    price: SalesforceInteractions.cashDom(ele).find(".pricing").text().trim().replace(/[^0-9\.]+/g,"")/itemQuantity,
                                    quantity: itemQuantity
                                };
                                cartLineItems.push(lineItem);
                            }
                        })
                        return cartLineItems;
                    })
                }
            },
            {
                name: "Order Confirmation",
                action: "Order Confirmation",
                isMatch: () => /\/confirmation/.test(window.location.href),
                interaction: {
                    name: SalesforceInteractions.OrderInteractionName.Purchase,
                    order: {
                        id: SalesforceInteractions.DisplayUtils.pageElementLoaded(".order-number", "html").then((ele) => {
                            return SalesforceInteractions.resolvers.fromSelector(".order-number");
                        }),
                        lineItems: SalesforceInteractions.DisplayUtils.pageElementLoaded(".product-line-item", "html").then(() => {   
                            let purchaseLineItems = [];
                            SalesforceInteractions.cashDom(".product-line-item").each((index, ele) => {
                                let itemQuantity = parseInt(SalesforceInteractions.cashDom(ele).find(".qty-card-quantity-count").text().trim());
                                if (itemQuantity && itemQuantity > 0) {
                                    let lineItem = {
                                        catalogObjectType: "Product",
                                        catalogObjectId: SalesforceInteractions.cashDom(ele).find(".line-item-quantity-info").attr("data-pid").trim(),
                                        price: SalesforceInteractions.cashDom(ele).find(".pricing").text().trim().replace(/[^0-9\.]+/g,"")/itemQuantity,
                                        quantity: itemQuantity
                                    };
                                    purchaseLineItems.push(lineItem);
                                }    
                            })
                            return purchaseLineItems;
                        })
                    }
                }
            },
            {
                name: "Login",
                isMatch: () => {
                    return (/\/login/.test(window.location.href) ||  /\/checkout-login/.test(window.location.href))&& !/\/s\/login/.test(window.location.href);
                },
                interaction: {
                    name: "Login"
                },
                listeners: [
                    SalesforceInteractions.listener("click", "form[name='login-form'] button", () => {
                        const email = SalesforceInteractions.cashDom("#login-form-email").val();
                        if (email) {
                            SalesforceInteractions.sendEvent({ interaction: { name: "Logged In" }, user: { identities: { emailAddress: email } } });
                        }
                    })
                ]
            },
            {
                name: "Homepage",
                isMatch: () => {
                    return /\/homepage/.test(window.location.href);
                },
                interaction: {
                    name: "Homepage"
                },
                contentZones: [
                    {name: "Homepage | Hero", selector: ".experience-carousel-bannerCarousel"},
                    {name: "Homepage | CTA", selector: ".experience-component[data-slick-index='0'] .hero-banner-overlay-inner"},
                    {name: "Homepage | Sub Hero", selector: "body > div.page > section > div.experience-region.experience-main > div:nth-child(1)"},
                    {name: "Homepage | Product Recommendations", selector: "div.experience-region.experience-main > div:nth-child(2)"},
                    {name: "Homepage | Popup"},
                    {name: "Featured Categories", selector: ".experience-component.experience-layouts-3_column"},
                    {name: "Search Bar", selector: "nav form[role='search']"},
                    {name: "Homepage | Redirect"}
                ]
            },
            {
                name: "In Store Experience",
                isMatch: function() {
                    return /\/instore-experience/.test(window.location.href);
                },
                interaction: {
                    name: "In Store Experience"
                },
                listeners: [
                    SalesforceInteractions.listener("click", ".beacon.entrance", () => {
                        SalesforceInteractions.sendEvent({interaction: {name: "Physical - Store (Entrance)"}});
                    }),
                    SalesforceInteractions.listener("click", ".beacon.mens", () => {
                        SalesforceInteractions.sendEvent({interaction: {name: "Physical - Store (Camping)"}});
                    }),
                    SalesforceInteractions.listener("click", ".beacon.shoes", () => {
                        SalesforceInteractions.sendEvent({interaction: {name: "Physical - Store (Footwear)"}});
                        SalesforceInteractions.sendEvent({interaction: {name: "Mobile - iOS (In-Store Push)"}});
                    }),
                    SalesforceInteractions.listener("click", ".iphone-screen.screen-2", () => {
                        SalesforceInteractions.sendEvent({interaction: {name: "Mobile - iOS (In-Store Push, App Open)"}});
                    }),
                    SalesforceInteractions.listener("click", ".beacon.register", () => {
                         SalesforceInteractions.sendEvent({
                            interaction: {
                                name: SalesforceInteractions.OrderInteractionName.Purchase,
                                order: {
                                    id: Date.now(),
                                    lineItems:[
                                        {
                                            catalogObjectType: "Product",
                                            catalogObjectId: "2050857",
                                            price: 90,   
                                            quantity: 1
                                        }
                                    ]
                                }
                            }
                        })
                    }),

                ]  
            },
        ],
        pageTypeDefault: {
            name: "Default"
        }
    };
    


var ecConfig = {
    	global: {
    		/**
    		 * The following Global Action Event listener adds User Data
    		 * captured by Data Collection LWC to every event sent to 
    		 * Interaction Studio 
    		 */
    		onActionEvent: (event) => {
    			var userData = interactionStudioExperienceCloudHelpers.userData;
    			if(userData){
    				event.user = event.user || {};
    				event.user.attributes = event.user.attributes || {};
    				event.user.attributes.userName = ((userData?.fields?.FirstName?.value || '') + ' ' + (userData?.fields?.LastName?.value || '')).trim();
    				//event.user.attributes.experienceCloudUserId = userData?.id;
    				event.user.attributes.emailAddress = userData?.fields?.Email?.value;
    				//event.user.attributes.companyName = userData?.fields?.CompanyName?.value;
    			}
    
    			return event;
    		}
    	},
    	pageTypes: [
            {
                name: "Community Login",
                isMatch: () => /\/s\/login/.test(window.location.href),
                interaction:{
                    name:"Community Login"
                },
                listeners: [
                    SalesforceInteractions.listener("click", ".loginButton", () => {
                        var email = SalesforceInteractions.cashDom("#sfdc_username_container > div > input").val();
                        if (email) {
                             SalesforceInteractions.sendEvent({ interaction: { name: "Community Login" }, user: { identities: { emailAddress: email } } });
                        }
                    }),
                ]
            },
            {
                name: "Community Stories",
                isMatch: () => {
                    return  /\/s\/stories/.test(window.location.href);
                },
                interaction: {
                    name: "Viewed Stories"
                }
            },
            {
                name: "Community Blog Post",
                isMatch: () => {
                    return new Promise((resolve, reject) => {
                        if(!/\/s\/ntoblog/.test(window.location.href)){
                            resolve(false);
                        }    
                        else {
                            SalesforceInteractions.mcis.DisplayUtils.pageElementLoaded('div.js-content-image.slds-col.slds-m-bottom_medium').then(() => {
                                resolve(true);
                            });
                        }
                    });
                },
                interaction: {
                    name: SalesforceInteractions.CatalogObjectInteractionName.ViewCatalogObject,

                    catalogObject: {
                        type: "Blog",
                        id: () => {
                            var pParts = location.pathname.split("/");
                            //console.log(pParts);
                            var lastPart = "";
                            var pageParts = "";
                            var urlID = "";
                            if (pParts.length > 0) {
                                lastPart = pParts[pParts.length-1];
                                //console.log(lastPart);
                                pageParts = lastPart.split("-");
                                if (pageParts.length > 0) {
                                    urlID = pageParts[pageParts.length-1];
                                }
                            }
                            return urlID;
                        },
                        attributes: {
                            name: () => document.title.replace(/&nbsp;/g, " ").replace(/\uFFFD/g, ""),
                            url: SalesforceInteractions.resolvers.fromHref(),
                            imageUrl: () => { 
                                return (SalesforceInteractions.cashDom("#NTO-page > div.body > div > div > div:nth-child(1) > div > div.cb-section_row.slds-grid.slds-wrap.slds-large-nowrap > div > div > div > div > div > div > div.js-content-image.slds-col.slds-m-bottom_medium").css('background-image').match(/url\(["']?([^"']*)["']?\)/)[1] ? SalesforceInteractions.cashDom("#NTO-page > div.body > div > div > div:nth-child(1) > div > div.cb-section_row.slds-grid.slds-wrap.slds-large-nowrap > div > div > div > div > div > div > div.js-content-image.slds-col.slds-m-bottom_medium").css('background-image').match(/url\(["']?([^"']*)["']?\)/)[1] : "");
                            },
                            description: SalesforceInteractions.resolvers.fromSelector("#NTO-page > div.body > div > div > div:nth-child(2) > div > div.cb-section_row.slds-grid.slds-wrap.slds-large-nowrap > div > div > div:nth-child(2) > div > div > div > div > lightning-formatted-rich-text > span > p:nth-child(1)"),
                        },
                        relatedCatalogObjects: {
                            Category: SalesforceInteractions.resolvers.buildCategoryId("#NTO-page > div.body > div > div > div:nth-child(2) > div > div.cb-section_row.slds-grid.slds-wrap.slds-large-nowrap > div > div > div:nth-child(1) > div > div > div > div > div > ul > li", null, null, (val) => {
                                    if (typeof val === "string") {
                                        console.log(val);
                                        return [val.toUpperCase()];
                                    }  
                                }),
                        }
                    },
                }
            },
    		{
    			name: "Question Detail",
    			isMatch: () => /\/s\/question\//.test(window.location.pathname),
    			interaction: {name: "Question Detail View"},
                contentZones: [{ 
                    name: "featured_product",selector: "#featured_product"
    			}]
    		},
            {
                name: "Community Homepage",
                action: "Community Homepage",
                isMatch: () => {
                    return /\/s/.test(window.location.pathname) 
                        && !/\/s\/question\//.test(window.location.pathname) 
                        && !/\/s\/ntoblog\//.test(window.location.pathname) 
                        && !/\/login/.test(window.location.href);
                },
                listeners: [
                    SalesforceInteractions.listener("click", "div.topicContent", () => {
                        const topicLabel = SalesforceInteractions.cashDom(event.currentTarget).find(".topicLabel").text().trim();
                        if (typeof topicLabel === "string") {
                            SalesforceInteractions.sendEvent({ interaction: { name: "Community Homepage - " + topicLabel } });
                        }
                    }),
                ]
            },
    	]
    };


    const getProductsFromDataLayer = () => {
        if (window.dataLayer) {
            for (var i = 0; i < window.dataLayer.length; i++) {
                if ((window.dataLayer[i].ecommerce && window.dataLayer[i].ecommerce.detail || {}).products) {
                    return window.dataLayer[i].ecommerce.detail.products;
                }
            }
        }
    };

    if(window.location.host.includes('community')){
        let currentUrl = window.location.href;
        let isSitemapInitialized = false;
        
        document.addEventListener('lwc_onuserdataready', (e) => {
            console.log('lwc_onuserdataready Event received');
            if(isSitemapInitialized) return;
            
            isSitemapInitialized = true;
            
            interactionStudioExperienceCloudHelpers.catchBuilderContext();
    
            interactionStudioExperienceCloudHelpers.userData = e && e.detail && e.detail.userData;
    
            SalesforceInteractions.initSitemap(ecConfig);
    
            setInterval(() => {
                if(currentUrl !== window.location.href){
                    currentUrl = window.location.href;
                    SalesforceInteractions.reinit();
                }
            }, 1000); 
        });
    }
    else{
        SalesforceInteractions.initSitemap(config);
    }
});
